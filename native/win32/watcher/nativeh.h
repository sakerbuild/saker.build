/*
 * Copyright (C) 2020 Bence Sipka
 *
 * This program is free software: you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class saker_osnative_watcher_windows_SakerWindowsWatchService */

#ifndef _Included_saker_osnative_watcher_windows_SakerWindowsWatchService
#define _Included_saker_osnative_watcher_windows_SakerWindowsWatchService
#ifdef __cplusplus
extern "C" {
#endif
	/*
	* Class:     saker_osnative_watcher_windows_SakerWindowsWatchService
	* Method:    OpenWatcher_native
	* Signature: ()J
	*/
	JNIEXPORT jlong JNICALL Java_saker_osnative_watcher_windows_SakerWindowsWatchService_OpenWatcher_1native
	(JNIEnv *, jclass);

	/*
	* Class:     saker_osnative_watcher_windows_SakerWindowsWatchService
	* Method:    CloseWatcher_native
	* Signature: (J)V
	*/
	JNIEXPORT void JNICALL Java_saker_osnative_watcher_windows_SakerWindowsWatchService_CloseWatcher_1native
	(JNIEnv *, jclass, jlong);

	/*
	* Class:     saker_osnative_watcher_windows_SakerWindowsWatchService
	* Method:    CreateKeyObject_native
	* Signature: (JLjava/lang/String;ILsaker/osnative/watcher/base/SakerNativeWatchKey;)J
	*/
	JNIEXPORT jlong JNICALL Java_saker_osnative_watcher_windows_SakerWindowsWatchService_CreateKeyObject_1native
	(JNIEnv *, jclass, jlong, jstring, jint, jobject);

	/*
	* Class:     saker_osnative_watcher_windows_SakerWindowsWatchService
	* Method:    CloseKey_native
	* Signature: (JJ)V
	*/
	JNIEXPORT void JNICALL Java_saker_osnative_watcher_windows_SakerWindowsWatchService_CloseKey_1native
	(JNIEnv *, jclass, jlong, jlong);

	/*
	* Class:     saker_osnative_watcher_windows_SakerWindowsWatchService
	* Method:    PollKey_native
	* Signature: (JJ)V
	*/
	JNIEXPORT void JNICALL Java_saker_osnative_watcher_windows_SakerWindowsWatchService_PollKey_1native
	(JNIEnv *, jclass, jlong, jlong);

	/*
	* Class:     saker_osnative_watcher_windows_SakerWindowsWatchService
	* Method:    KeyIsValid_native
	* Signature: (JJ)Z
	*/
	JNIEXPORT jboolean JNICALL Java_saker_osnative_watcher_windows_SakerWindowsWatchService_KeyIsValid_1native
	(JNIEnv *, jclass, jlong, jlong);

	JNIEXPORT jstring JNICALL Java_saker_osnative_watcher_NativeWatcherService_getImplementationClassName_1native
	(JNIEnv* env, jclass clazz)

#ifdef __cplusplus
}
#endif
#endif
