package testing.saker.build.tests.launching;

import java.nio.file.Path;
import java.security.Key;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.util.Enumeration;
import java.util.Map;

import saker.build.launching.LaunchConfigUtils;
import saker.build.thirdparty.saker.util.StringUtils;
import testing.saker.SakerTest;
import testing.saker.SakerTestCase;
import testing.saker.build.tests.EnvironmentTestCase;

@SakerTest
public class KeyStoreOpenTest extends SakerTestCase {

	@Override
	public void runTest(Map<String, String> parameters) throws Throwable {
		Path dir = EnvironmentTestCase.getTestingBaseWorkingDirectory().resolve(getClass().getName().replace('.', '/'));

		//keytool -genkey -alias test_alias -keystore keytore_testtest.jks -keyalg RSA -storepass testtest -dname "CN=k1" -keypass testtest -validity 10000
		openTestKeyStore(dir.resolve("keytore_testtest.jks"));
		//keytool -genkey -alias test_alias -keystore keytore_testtest.p12 -keyalg RSA -storepass testtest -dname "CN=k1" -keypass testtest -validity 10000 -storetype pkcs12
		openTestKeyStore(dir.resolve("keytore_testtest.p12"));

		//openssl req -x509 -newkey rsa:4096 -keyout emptypass_key.pem -out emptypass_cert.pem -days 10000 -nodes
		//openssl pkcs12 -export -out emptypass.p12 -inkey emptypass_key.pem -in emptypass_cert.pem
		openTestKeyStore(dir.resolve("emptypass.p12"));
		openTestKeyStore(dir.resolve("emptypass.p12"), new char[][] { "".toCharArray() });
		assertException(KeyStoreException.class, () -> openTestKeyStore(dir.resolve("emptypass.p12"),
				new char[][] { "this-is-not-the-password".toCharArray() }));

		//keytool -genkey -alias test_alias -keystore fullnamepass.jks -keyalg RSA -storepass fullnamepass -dname "CN=k1" -keypass fullnamepass -validity 10000
		openTestKeyStore(dir.resolve("fullnamepass.jks"));
		openTestKeyStore(dir.resolve("fullnamepass.jks"), new char[][] { "fullnamepass".toCharArray() });
		assertException(KeyStoreException.class, () -> openTestKeyStore(dir.resolve("fullnamepass.jks"),
				new char[][] { "this-is-not-the-password".toCharArray() }));

		//keytool -genkey -alias test_alias -keystore keystore_some_partial_pass.jks -keyalg RSA -storepass partial_pass -dname "CN=k1" -keypass partial_pass -validity 10000
		openTestKeyStore(dir.resolve("keystore_some_partial_pass.jks"));

		//keytool -genkey -alias test_alias -keystore differentpass.jks -keyalg RSA -storepass abcd1234 -dname "CN=k1" -keypass abcd1234 -validity 10000
		assertException(KeyStoreException.class, () -> openTestKeyStore(dir.resolve("differentpass.jks")));
		openTestKeyStore(dir.resolve("differentpass.jks"), new char[][] { "abcd1234".toCharArray() });
		//attempt inferring it (should fail, but make sure we can still open it with the correct password)
		openTestKeyStore(dir.resolve("differentpass.jks"), new char[][] { null, "abcd1234".toCharArray() });
		openTestKeyStore(dir.resolve("differentpass.jks"),
				new char[][] { "test-something-else".toCharArray(), "abcd1234".toCharArray() });

		// password with "changeit", which is the same as the cacerts keystore
		//keytool -genkey -alias test_alias -keystore default_password.jks -keyalg RSA -storepass changeit -dname "CN=changeit" -keypass changeit -validity 10000
		openTestKeyStore(dir.resolve("default_password.jks"));
	}

	private static void openTestKeyStore(Path path)
			throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException {
		char[][] inoutkeystorepass = new char[1][];
		openTestKeyStore(path, inoutkeystorepass);
	}

	private static void openTestKeyStore(Path path, char[][] inoutkeystorepass)
			throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException {
		KeyStore keystore = LaunchConfigUtils.openKeystore(path, inoutkeystorepass);
		System.out.println("KeyStore: " + path.getFileName());
		System.out.println("  Password: " + String.valueOf(inoutkeystorepass[0]));

		for (Enumeration<String> aliases = keystore.aliases(); aliases.hasMoreElements();) {
			String alias = aliases.nextElement();
			System.out.println("  Alias: " + alias);
			Key key = keystore.getKey(alias, inoutkeystorepass[0]);
			System.out.println("    Key: ");
			System.out.println("      " + key.getAlgorithm());
			System.out.println("      " + key.getFormat());
			System.out.println("      " + StringUtils.toHexString(key.getEncoded()));
		}
	}

}
